    #include <iostream>
    #include <limits.h>
    using namespace std;
     
    #define K 5
     
    int findMinimumDistance(int distance[], bool isIncluded[]) {
    	int minimum = INT_MAX, minimum_index;
     
    	for (int i=0; i<K; i++)
    		if (!isIncluded[i] && distance[i] <= minimum)
    			minimum = distance[i], minimum_index = i;
     
    	return minimum_index;
    }
     
    void printRoute(int distance[]) {
    	cout << "Solution" << endl;
    	cout << "Start: Distance fron Source" << endl;
    	for (int i=0; i<K; i++) 
    		cout << i << ": " << distance[i] << endl;
    }
     
    void findRoute(int arena[K][K], int start) {
    	int distance[K];
    	bool isIncluded[K];
     
    	for (int i=0; i<K; i++)
    		distance[i] = INT_MAX, isIncluded[i] = false;
     
    	distance[start] = 0;
     
    	for (int i=0; i < K-1; i++) {
    		int minimumIndex = findMinimumDistance(distance, isIncluded);
     
    		isIncluded[i] = true;
     
    		for (int j=0; j<K; j++) {
    			if (!isIncluded[j] && arena[minimumIndex][j] 
    			&& distance[minimumIndex] != INT_MAX && distance[minimumIndex] + arena[minimumIndex][j] < distance[j])
    				distance[j] = distance[minimumIndex] + arena[minimumIndex][j];
    		}
    	}
     
    	printRoute(distance);
    }
     
    int main() {
    	int arena[K][K] = { { 0, 4, 9, 5, 3 },
    					   { 4, 0, 9, 2, 3 },
    					   { 5, 9, 0, 9, 3},
    					   { 6, 2, 9, 0, 1},
    					   { 7, 3, 3, 1, 0}};
     
    	int start;
    	cout << "Fill the start from 0 to 4" << endl;
    	cin >> start;
    	findRoute(arena, start);
     
    }
